
TUTORIAL BASICO:

-Superscalar x Escalar 
Superscalar sao processadores que tem mais de 1 pipeline, escalar tem apenas 1 pipeline

Pipeline exemplo para 5 estágios: IF-(A)-ID-(B)-EX-(C)-MEM-(D)-WB

1)Instruction fetch
2)Instruction decode & register read
3)Execute operation 
4)Access memory operand
5)Write back

Pipeline registers:hold information produced in previous cycle
A) IF/ID
B) ID/EX
C) EX/MEM
D) MEM/WB


-Hazards:conceitos

  a) Dados: Uma instrução precisa de um resultado que ainda não foi completamente calculado. ex:
  add t1, t2, t3
  add t5, t1, t4
  Mecanismo para contornar isso:forwarding; 
  Mandar o resultado da ALU assim que for computado através de conexões usando os pipeline registers
  
  b) Estrutural: há um conflito no uso de um recurso
  	Exemplo: instruções do tipo L(load/store) exigem acesso a memória e causam conflito com o fetch de uma instrução
  Mecanismo: cache de instruções e dados separados
  
  c) Controle: Um branch é executado e todo o progresso do pipeline deve ser descartado
  Mecanismo: branch prediction
  
  ##################################################################
  ###IMPORTANTE :: O PROFESSOR PEDE PARA POR ISSO NO RELATORIO
  ###identifiquem e listem todos os hazards a serem avaliados. Incluam uma descrição das condições em que cada hazard acontece
  ##################################################################
 -Lista de todos os hazards
  
  a)O número de bolhas depende da distância entre as intruções e da quantidade de estágios entre o ponto em que o dado é
  calculado e o ponto em que ele é requisitado.(???)
  
  	*R-type instructions: não há bolhas, usa-se forwarding
	*Load-Store L-type instructions: atraso de 1 bolha <=> L-type instruction e em seguinda uma instrução que usa registrador de destino da linha anterior
  		ex.: 	lw $s0, 20($t1)
  			sub $t2,$s0,$t3
  			
  			
  	Desse modo, não há atrasos para o caso de Hazard de dados com instruções do tipo R.
  	Para instruções do tipo Acesso à memória, há 1 ciclo de atraso.
  
  b)O número de bolhas depende dos cache misses.
  
  i)Se a instrução já estiver na Cache L1, não há penalidade
  ii)Se a instrução não estiver na Cache L1, há penalidade de X1 ciclos para ir até a Cache L2.
  iii)Se a instrução não estiver na Cache L2, há penalidade de X2 ciclos para ir buscar até a memória.
  Supondo que há apenas uma memória que guardam tanto dados e instruções, quando há um acesso à memória por uma instrução do tipo L no quarto estágio do Pipeline (MEM), isso pode causar mais uma bolha para o fetch da instrução no primeiro estágio do Pipeline (IF).
  Ou seja, deve-se esperar que o acesso a memória de outra instrução seja finalizado para poder buscar a instrução atual.
  
   ##Depois de gerar os traces de acesso à memória e computar um número de ciclos base, 
vocês podem adicionar um número de ciclos equivalente aos hits e misses na L1 e L2. Encontrem números razoáveis para estas penalidades e justifiquem a escolha


  c)O número de bolhas depende do estágio em que o branch é tomado.
  
Branch Prediction:

add $4, $5 ,$6
beq $1,$2,40
lw $3,300($0)

## linha 40 = or $7,$8,$9

- Prediction correct --> 0 bolhas

- Prediction incorrect --> N bolhas

Se não usar o branch prediction --> X bolhas 

	--------------------------------------

Static branch prediction:


### Realmente sempre não tomar o branch? ##
	a) se for branch para alguma linha atras 
		=> branch taken
	b) se for branch para alguma linha pra frente
		=> branch not taken

Dynamic Branch prediction:

- Máquina de estados:

	https://www.cs.umd.edu/class/fall2013/cmsc411-0201/lectures/lec09.pdf
	
	
	Cáluclo da CPI:
	####o CPI será computado de acordo com issue (escalar vs. superescalar), bolhas introduzidas devido a hazards, atraso no acesso à memória, e
 atraso por branches
	

    Status API Training Shop Blog About 

    © 2016 GitHub, Inc. Terms Privacy Security Contact Help 

